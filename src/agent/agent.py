from langchain.agents import Tool, AgentExecutor, BaseSingleActionAgent
from langchain.chains import LLMChain
from langchain.prompts import PromptTemplate
from langchain.embeddings import OpenAIEmbeddings
from langchain.vectorstores import ElasticsearchStore
from langchain.llms import OpenAI
from typing import List, Dict, Any
import json

class HyDESelfQueryCreditCardAgent(BaseSingleActionAgent):
    """
    A custom LangChain agent that uses HyDE and self-query methods to retrieve
    the most relevant credit cards from Elasticsearch.
    """
    def __init__(self, elasticsearch_index: str, embedding_model: OpenAIEmbeddings, llm: OpenAI):
        """
        Initialize the agent with necessary components.

        Args:
            elasticsearch_index (str): Name of the Elasticsearch index containing credit card data.
            embedding_model (OpenAIEmbeddings): Embedding model for generating HyDE embeddings.
            llm (OpenAI): Language model for generating hypothetical documents and self-queries.
        """
        self.elasticsearch_index = elasticsearch_index
        self.embedding_model = embedding_model
        self.llm = llm
        self.vector_store = ElasticsearchStore(
            index_name=elasticsearch_index,
            embedding=self.embedding_model
        )

    def _generate_hyde_document(self, user_input: str) -> str:
        """
        Generate a hypothetical document based on the user's input using the language model.

        Args:
            user_input (str): The user's query or input.

        Returns:
            str: Hypothetical document generated by the language model.
        """
        hyde_prompt = PromptTemplate(
            template="Generate a detailed hypothetical document about credit cards that would answer the following query: {query}",
            input_variables=["query"]
        )
        hyde_chain = LLMChain(llm=self.llm, prompt=hyde_prompt)
        return hyde_chain.run(query=user_input)

    def _generate_self_query(self, user_input: str) -> str:
        """
        Generate a structured self-query based on the user's input using the language model.

        Args:
            user_input (str): The user's query or input.

        Returns:
            str: Structured self-query in JSON format.
        """
        self_query_prompt = PromptTemplate(
            template="Generate a structured query in JSON format to retrieve relevant credit cards from Elasticsearch based on the following input: {input}",
            input_variables=["input"]
        )
        self_query_chain = LLMChain(llm=self.llm, prompt=self_query_prompt)
        return self_query_chain.run(input=user_input)

    def _retrieve_relevant_cards(self, hyde_embedding: List[float], self_query: Dict[str, Any]) -> List[Dict[str, Any]]:
        """
        Retrieve the most relevant credit cards from Elasticsearch using the HyDE embedding and self-query.

        Args:
            hyde_embedding (List[float]): Embedding of the hypothetical document.
            self_query (Dict[str, Any]): Structured self-query in JSON format.

        Returns:
            List[Dict[str, Any]]: List of relevant credit cards retrieved from Elasticsearch.
        """
        # Use HyDE embedding for similarity search
        relevant_documents = self.vector_store.similarity_search_by_vector(hyde_embedding, k=10)

        # Filter results using the self-query
        filtered_results = []
        for doc in relevant_documents:
            card_data = json.loads(doc.json())  # Assuming stored data is in JSON format
            if all(card_data.get(key) == value for key, value in self_query.items()):
                filtered_results.append(card_data)

        return filtered_results

    def plan(self, intermediate_steps: List[Dict[str, Any]], **kwargs: Any) -> str:
        """
        Plan the next action based on the user's input.

        Args:
            intermediate_steps (List[Dict[str, Any]]): Intermediate steps in the agent's execution.
            **kwargs (Any): Additional arguments, including the user's input.

        Returns:
            str: Action to take next.
        """
        user_input = kwargs.get("input")
        if not user_input:
            return "No input provided."

        # Step 1: Generate a hypothetical document using HyDE
        hyde_document = self._generate_hyde_document(user_input)
        hyde_embedding = self.embedding_model.embed_query(hyde_document)

        # Step 2: Generate a structured self-query
        self_query_json = self._generate_self_query(user_input)
        self_query = json.loads(self_query_json)

        # Step 3: Retrieve relevant credit cards
        relevant_cards = self._retrieve_relevant_cards(hyde_embedding, self_query)

        # Return the results as a JSON string
        return json.dumps(relevant_cards)

    def get_allowed_tools(self) -> List[Tool]:
        """
        Get the list of allowed tools for this agent.

        Returns:
            List[Tool]: List of allowed tools.
        """
        return []

# Example usage
if __name__ == "__main__":
    # Initialize components
    embedding_model = OpenAIEmbeddings()
    llm = OpenAI(temperature=0.7)
    elasticsearch_index = "credit_cards"

    # Create the agent
    agent = HyDESelfQueryCreditCardAgent(elasticsearch_index, embedding_model, llm)

    # Example user input
    user_input = "Find me a credit card with no annual fee and cashback rewards."

    # Run the agent
    result = agent.plan(input=user_input)
    print(result)